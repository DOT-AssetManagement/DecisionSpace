@page
@model DSS.Web.Pages.Outputs.ChartsModel
@{
}
@{
    Layout = "Shared/Layout";
    ViewData["Menu"] = "DSSMenus.Outputs";
    ViewData["SubMenu"] = "Charts";
}

<script src="//d3js.org/d3.v2.min.js" charset="utf-8"></script>
<script src="~/js/sankey.js" charset="utf-8"></script>
<div class="container-fluid px-4">
    <h1 class="mt-4">Charts</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="#">Dashboard</a></li>
        <li class="breadcrumb-item active">Charts</li>
    </ol>
    <div class="card mb-4">
        <div class="card-body">
            <p id="chart" style="height:auto"></p>

        </div>
    </div>

</div>
<style>
    .node rect {
        cursor: move;
        fill-opacity: .9;
        shape-rendering: crispEdges;
    }

    .node text {
        pointer-events: none;
        text-shadow: 0 1px 0 #fff;
    }

    .link {
        fill: none;
        stroke: #000;
        stroke-opacity: .2;
    }

    .link:hover {
        stroke-opacity: .5;
    }
</style>
<script>

    var margin = { top: 10, right: 1, bottom: 6, left: 1 },
        width = 950 - margin.left - margin.right,
        height = (5 * 75) - margin.top - margin.bottom;

    var formatNumber = d3.format(",.2f"),
        format = function (d) { return formatNumber(d); },
        color = d3.scale.category20();

    var svg = d3.select("#chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var sankey = d3.sankey()
        .nodeWidth(15)
        .nodePadding(10)
        .size([width, height]);

    var path = sankey.link();


    energy = JSON.parse('{"nodes":[{"name":"01 _ Bridge Functional Improvement _ Route 95"},{"name":"05 _ Bridge Seismic Retrofit _ Route 56"},{"name":"18 _ Pavement Rehab_Bike Path _ Route 88"},{"name":"23 _ Safety Improvements _ Route 105"},{"name":"24 _ Safety Improvements _ Route 116"},{"name":"Mobility"},{"name":"Preservation"},{"name":"Safety"},{"name":"Environment"}],"links":[{"source":0,"target":6,"value":"15.90"},{"source":1,"target":5,"value":"19.04"},{"source":1,"target":6,"value":"0.52"},{"source":2,"target":6,"value":"34.60"},{"source":2,"target":8,"value":"16.51"},{"source":3,"target":7,"value":"30.08"},{"source":4,"target":7,"value":"48.19"}]}');

    sankey
        .nodes(energy.nodes)
        .links(energy.links)
        .layout(32);

    var link = svg.append("g").selectAll(".link")
        .data(energy.links)
        .enter().append("path")
        .attr("class", "link")
        .attr("d", path)
        .style("stroke-width", function (d) { return Math.max(1, d.dy); })
        .sort(function (a, b) { return b.dy - a.dy; });

    link.append("title")
        .text(function (d) { return d.source.name + " → " + d.target.name + "\n" + format(d.value); });

    var node = svg.append("g").selectAll(".node")
        .data(energy.nodes)
        .enter().append("g")
        .attr("class", "node")
        .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; })
        .call(d3.behavior.drag()
            .origin(function (d) { return d; })
            .on("dragstart", function () { this.parentNode.appendChild(this); })
            .on("drag", dragmove));

    node.append("rect")
        .attr("height", function (d) { return d.dy; })
        .attr("width", sankey.nodeWidth())
        .style("fill", function (d) { return d.color = color(d.name.replace(/ .*/, "")); })
        .style("stroke", function (d) { return d3.rgb(d.color).darker(2); })
        .append("title")
        .text(function (d) { return d.name + "\n" + d.value; });

    node.append("text")
        .attr("x", -6)
        .attr("y", function (d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "end")
        .attr("transform", null)
        .text(function (d) { return d.name; })
        .filter(function (d) { return d.x < width / 2; })
        .attr("x", 6 + sankey.nodeWidth())
        .attr("text-anchor", "start");

    function dragmove(d) {
        d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
        sankey.relayout();
        link.attr("d", path);
    }


</script>