@page
@model DSS.Web.Pages.Outputs.Charts.ProjectsAndGoalsPercentageContributionModel
@{
}
@{
    Layout = "Shared/Layout";
    ViewData["Menu"] = "DSSMenus.Outputs";
    ViewData["SubMenu"] = "Charts";
    ViewData["SubSubMenu"] = "ProjectsAndGoalsPercentageContribution";
    ViewData["poolId"] = Model.PoolId != Guid.Empty ? Model.PoolId.ToString() : "";
}
<script src="https://d3js.org/d3.v4.min.js"></script>



<div class="container-fluid px-4">
    <h1 class="mt-4">Projects And Goals Percentage Contribution</h1>
  
    <div class="card mb-4">
        <div class="card-body">

            <form method="get" class="row">
                <div class="form-group col-md-4">
                    <label for="scenarioSelect">Select Candidate Pool:</label>
                    <div class="input-group">
                        <select class="form-control form-control-sm" id="scenarioSelect" name="poolId">
                            <option value=""><strong>-- Select Candidate Pool --</strong></option>
                            @foreach (var pool in Model.Pools)
                            {
                                @if (pool.Id == Model.PoolId)
                                {
                                    <option value="@pool.Id" selected>@pool.Name</option>
                                }
                                else
                                {
                                    <option value="@pool.Id">@pool.Name</option>
                                }

                            }
                        </select>
                    </div>
                </div>
                <div class="form-group col-md-4" style="margin-top:-1%">
                    <button type="submit" class="btn btn-primary" style="margin-top: 32px;">Search</button>
                </div>
            </form>

            <div id="charts">
                <svg width="1000" height="1000"></svg>
            </div>

        </div>
    </div>

</div>

 <script>
    function createChartLegend(mainDiv, group) {
        // Define a mapping of values to color codes
        var colorMapping = {
            "SafetyScorePercentage": "#0033CC",
            "MobilityAndEconomyScorePercentage": "#006699",
            "EquityAndAccessScorePercentage": "#336699",
            "ResilienceAndEnvironmentScorePercentage": "#339999",
            "ConditionAndPerformanceScorePercentage": "#33CC99"
        };

        var mainDivName = mainDiv.substr(1, mainDiv.length);
        $(mainDiv).before("<div id='Legend_" + mainDivName + "' class='pmd-card-body' style='margin-top:0; margin-bottom:0;'></div>");
        var keys = group;

        keys.forEach(function (d) {
            // Get the color code from the mapping
            var colorCode = colorMapping[d] || "#000000"; // Default to black if the value is not in the mapping
            $("#Legend_" + mainDivName).append("<span class='team-graph team1' style='display: inline-block; margin-right:10px;'>\
                <span style='background:" + colorCode + ";width: 10px;height: 10px;display: inline-block;vertical-align: middle;'>&nbsp;</span>\
                <span style='padding-top: 0;font-family:Poppins;font-size: 22px;display: inline;'>" + d + " </span>\
                </span>");
        });
    }

    // Example usage
    var group = ["SafetyScorePercentage", "MobilityAndEconomyScorePercentage", "EquityAndAccessScorePercentage", "ResilienceAndEnvironmentScorePercentage", "ConditionAndPerformanceScorePercentage"];
    var parseDate = d3.timeFormat("%b-%Y");
    var mainDiv = "#charts";
    var mainDivName = "charts";
    createChartLegend(mainDiv, group);

    var salesData = @Html.Raw(Model.json);

    salesData.forEach(function (d) {
        d = type(d);
    });

    var layers = d3.stack()
        .keys(group)
        .offset(d3.stackOffsetDiverging)
        (salesData);

    var svg = d3.select("svg"),
        margin = { top: 20, right: 30, bottom: 60, left: 60 },
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var x = d3.scaleLinear()
        .rangeRound([margin.left, width - margin.right]);

    x.domain([d3.min(layers, stackMin), d3.max(layers, stackMax)]);

    var y = d3.scaleBand()
        .rangeRound([height - margin.bottom, margin.top])
        .padding(0.1);

    y.domain(salesData.map(function (d) {
        return d.Description;
    }));

    function stackMin(layers) {
        return d3.min(layers, function (d) {
            return d[0];
        });
    }

    function stackMax(layers) {
        return d3.max(layers, function (d) {
            return d[1];
        });
    }

    // Use the color mapping here as well
    var colorMapping = {
        "SafetyScorePercentage": "#0033CC",
        "MobilityAndEconomyScorePercentage": "#006699",
        "EquityAndAccessScorePercentage": "#336699",
        "ResilienceAndEnvironmentScorePercentage": "#339999",
        "ConditionAndPerformanceScorePercentage": "#33CC99"
    };

    var maing = svg.append("g")
        .selectAll("g")
        .data(layers);
    var g = maing.enter().append("g")
        .attr("fill", function (d) {
            return colorMapping[d.key] || "#000000"; // Default to black if the value is not in the mapping
        });

    var rect = g.selectAll("rect")
        .data(function (d) {
            d.forEach(function (d1) {
                d1.key = d.key;
                return d1;
            });
            return d;
        })
        .enter().append("rect")
        .attr("data", function (d) {
            var data = {};
            data["key"] = d.key;
            data["value"] = d.data[d.key];
            var total = 0;
            group.map(function (d1) {
                total = total + d.data[d1];
            });
            data["total"] = total;
            return JSON.stringify(data);
        })
        .attr("width", function (d) {
            return x(d[1]) - x(d[0]);
        })
        .attr("x", function (d) {
            return x(d[0]);
        })
        .attr("y", function (d) {
            return y(d.data.Description);
        })
        .attr("height", y.bandwidth);

    rect.on("mouseover", function () {
        var currentEl = d3.select(this);
        var fadeInSpeed = 120;
        d3.select("#recttooltip_" + mainDivName)
            .transition()
            .duration(fadeInSpeed)
            .style("opacity", function () {
                return 1;
            });
        d3.select("#recttooltip_" + mainDivName).attr("transform", function (d) {
            var mouseCoords = d3.mouse(this.parentNode);
            var xCo = 0;
            if (mouseCoords[0] + 10 >= width * 0.80) {
                xCo = mouseCoords[0] - parseFloat(d3.selectAll("#recttooltipRect_" + mainDivName)
                    .attr("width"));
            } else {
                xCo = mouseCoords[0] + 10;
            }
            var x = xCo;
            var yCo = 0;
            if (mouseCoords[0] + 10 >= width * 0.80) {
                yCo = mouseCoords[1] + 10;
            } else {
                yCo = mouseCoords[1];
            }
            var x = xCo;
            var y = yCo;
            return "translate(" + x + "," + y + ")";
        });
        //CBT:calculate tooltips text
        var tooltipData = JSON.parse(currentEl.attr("data"));
        var tooltipsText = "";
        d3.selectAll("#recttooltipText_" + mainDivName).text("");
        var yPos = 0;
        d3.selectAll("#recttooltipText_" + mainDivName).append("tspan").attr("x", 0).attr("y", yPos * 10).attr("dy", "1.9em").text(tooltipData.key + ":  " + tooltipData.value);
        yPos = yPos + 1;
        d3.selectAll("#recttooltipText_" + mainDivName).append("tspan").attr("x", 0).attr("y", yPos * 10).attr("dy", "1.9em").text("Total" + ":  " + tooltipData.total);
        //CBT:calculate width of the text based on characters
        var dims = helpers.getDimensions("recttooltipText_" + mainDivName);
        d3.selectAll("#recttooltipText_" + mainDivName + " tspan")
            .attr("x", dims.w + 4);

        d3.selectAll("#recttooltipRect_" + mainDivName)
            .attr("width", dims.w + 10)
            .attr("height", dims.h + 20);

    });

    rect.on("mousemove", function () {
        var currentEl = d3.select(this);
        currentEl.attr("r", 7);
        d3.selectAll("#recttooltip_" + mainDivName)
            .attr("transform", function (d) {
                var mouseCoords = d3.mouse(this.parentNode);
                var xCo = 0;
                if (mouseCoords[0] + 10 >= width * 0.80) {
                    xCo = mouseCoords[0] - parseFloat(d3.selectAll("#recttooltipRect_" + mainDivName)
                        .attr("width"));
                } else {
                    xCo = mouseCoords[0] + 10;
                }
                var x = xCo;
                var yCo = 0;
                if (mouseCoords[0] + 10 >= width * 0.80) {
                    yCo = mouseCoords[1] + 10;
                } else {
                    yCo = mouseCoords[1];
                }
                var x = xCo;
                var y = yCo;
                return "translate(" + x + "," + y + ")";
            });
    });
    rect.on("mouseout", function () {
        var currentEl = d3.select(this);
        d3.select("#recttooltip_" + mainDivName)
            .style("opacity", function () {
                return 0;
            })
            .attr("transform", function (d, i) {
                // klutzy, but it accounts for tooltip padding which could push it onscreen
                var x = -500;
                var y = -500;
                return "translate(" + x + "," + y + ")";
            });
    });

    svg.append("g")
        .attr("transform", "translate(0," + (height - margin.bottom) + ")")
        .call(d3.axisBottom(x))
        .append("text")
        .attr("x", width / 2)
        .attr("y", margin.bottom * 0.5)
        .attr("dx", "0.32em")
        .attr("fill", "#000")
        .attr("font-weight", "bold")
        .attr("text-anchor", "start")
        .text("Percentage");

    var ele = svg.append("g")
        .attr("transform", "translate(" + margin.left + ",0)")
        .call(d3.axisLeft(y));
    ele.selectAll("text")
        .attr("transform", "rotate(-55)")
        .attr("dx", ".5em")
        .attr("dy", "-.9em");
    ele.append("text")
        .attr("transform", "rotate(-90)")
        .attr("x", 0 - (height / 2))
        .attr("y", 15 - (margin.left))
        .attr("dy", "0.32em")
        .attr("fill", "#000")
        .attr("font-weight", "bold")
        .attr("text-anchor", "middle")
        .text("Projects");

    var rectTooltipg = svg.append("g")
        .attr("font-family", "sans-serif")
        .attr("font-size", 10)
        .attr("text-anchor", "end")
        .attr("id", "recttooltip_" + mainDivName)
        .attr("style", "opacity:0")
        .attr("transform", "translate(-500,-500)");

    rectTooltipg.append("rect")
        .attr("id", "recttooltipRect_" + mainDivName)
        .attr("x", 0)
        .attr("width", 120)
        .attr("height", 80)
        .attr("opacity", 0.71)
        .style("fill", "#000000");

    rectTooltipg
        .append("text")
        .attr("id", "recttooltipText_" + mainDivName)
        .attr("x", 30)
        .attr("y", 15)
        .attr("fill", function () {
            return "#fff";
        })
        .style("font-size", function (d) {
            return 10;
        })
        .style("font-family", function (d) {
            return "arial";
        })
        .text(function (d, i) {
            return "";
        });

    function type(d) {
        d.Description = d.Description;
        group.forEach(function (c) {
            d[c] = +d[c];
        });
        return d;
    }

    var helpers = {
        getDimensions: function (id) {
            var el = document.getElementById(id);
            var w = 0,
                h = 0;
            if (el) {
                var dimensions = el.getBBox();
                w = dimensions.width;
                h = dimensions.height;
            } else {
                console.log("error: getDimensions() " + id + " not found.");
            }
            return {
                w: w,
                h: h
            };
        }
    };

    </script>
